/**
 * hub-eclipse-plugin-test
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.eclipseplugin.views.ui;

import static org.junit.Assert.assertNotNull;

import org.eclipse.swtbot.eclipse.finder.SWTWorkbenchBot;
import org.eclipse.swtbot.swt.finder.junit.SWTBotJunit4ClassRunner;
import org.eclipse.swtbot.swt.finder.waits.DefaultCondition;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotMenu;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.blackducksoftware.integration.eclipseplugin.common.constants.MenuLabels;
import com.blackducksoftware.integration.eclipseplugin.common.constants.ViewIds;
import com.blackducksoftware.integration.eclipseplugin.common.constants.ViewNames;
import com.blackducksoftware.integration.eclipseplugin.test.utils.swtbot.SWTBotProjectUtils;

@RunWith(SWTBotJunit4ClassRunner.class)
public class VulnerabilityViewBotTest {

    private static SWTWorkbenchBot bot;

    private static SWTBotProjectUtils botUtils;

    private static final String TEST_JAVA_PROJECT_NAME = "warning-view-test-java-project";

    private static final String TEST_NON_JAVA_PROJECT_NAME = "warning-view-test-non-java-project";

    @BeforeClass
    public static void setUpWorkspaceBot() {
        bot = new SWTWorkbenchBot();
        botUtils = new SWTBotProjectUtils(bot);
        try {
            bot.viewByTitle("Welcome").close();
        } catch (final RuntimeException e) {
        }
        botUtils.createJavaProject(TEST_JAVA_PROJECT_NAME);
        botUtils.createNonJavaProject(TEST_NON_JAVA_PROJECT_NAME);
    }

    private void openVulnerabilityViewFromContextMenu(final String projectName) {
        final SWTBotTreeItem javaProjectNode = bot.viewByTitle("Package Explorer").bot().tree()
                .getTreeItem(projectName);
        javaProjectNode.click();
        final SWTBotMenu blackDuckMenu = javaProjectNode.select().contextMenu(MenuLabels.BLACK_DUCK);
        final SWTBotMenu warningViewMenu = blackDuckMenu.contextMenu(MenuLabels.VULNERABILITY_VIEW);
        warningViewMenu.click();
    }

    private void openVulnerabilityViewFromWindowMenu() {
        bot.menu("Window").menu("Show View").menu("Other...").click();
        bot.shell("Show View").activate();
        bot.tree().expandNode(ViewNames.BLACK_DUCK).expandNode(ViewNames.VULNERABILITIES).click();
        bot.waitUntil(new DefaultCondition() {
            @Override
            public String getFailureMessage() {
                return "ok button could not be enabled";
            }

            @Override
            public boolean test() {
                return bot.button("OK").isEnabled();
            }
        });
        bot.button("OK").click();
    }

    @Test
    public void testThatWarningViewOpensFromContextMenu() {
        openVulnerabilityViewFromContextMenu(TEST_JAVA_PROJECT_NAME);
        assertNotNull(bot.viewByTitle(ViewNames.VULNERABILITIES));
        assertNotNull(bot.viewById(ViewIds.VULNERABILITIES));
        bot.viewByTitle(ViewNames.VULNERABILITIES).close();
    }

    @Test
    public void testThatVulnerabilityViewOpensFromWindowMenu() {
        openVulnerabilityViewFromWindowMenu();
        assertNotNull(bot.viewByTitle(ViewNames.VULNERABILITIES));
        assertNotNull(bot.viewById(ViewIds.VULNERABILITIES));
        bot.viewByTitle(ViewNames.VULNERABILITIES).close();
    }

    @AfterClass
    public static void tearDownWorkspaceBot() {
        botUtils.deleteProjectFromDisk(TEST_JAVA_PROJECT_NAME);
        botUtils.deleteProjectFromDisk(TEST_NON_JAVA_PROJECT_NAME);
        bot.resetWorkbench();
    }

}
