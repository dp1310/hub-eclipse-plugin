/*
 * Copyright (C) 2016 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.eclipseplugin.views.ui;

import org.eclipse.core.resources.IResourceChangeEvent;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.TreeColumnViewerLabelProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.TreeViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import com.blackducksoftware.integration.build.utils.FilePathGavExtractor;
import com.blackducksoftware.integration.eclipseplugin.common.services.DependencyInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.ProjectInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.WorkspaceInformationService;
import com.blackducksoftware.integration.eclipseplugin.internal.ProjectDependencyInformation;
import com.blackducksoftware.integration.eclipseplugin.startup.Activator;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.PreferenceChangeDisplayUpdateListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectDeletedListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectSelectionListener;
import com.blackducksoftware.integration.eclipseplugin.views.providers.ComponentTreeViewContentProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.ComponentTreeViewLabelProvider;

public class VulnerabilityView extends ViewPart {
    private TreeViewer componentViewer;

    private IPreferenceStore prefStore;

    private ProjectDependencyInformation projectInformation;

    private String lastSelectedProjectName = "";

    private Display display;

    private WorkspaceInformationService workspaceInformationService;

    private PreferenceChangeDisplayUpdateListener preferenceChangeDisplayUpdateListener;

    private ProjectDeletedListener projectDeletedListener;

    private ProjectSelectionListener projectSelectionListener;

    @Override
    public void createPartControl(Composite parent) {
        prefStore = Activator.getDefault().getPreferenceStore();
        workspaceInformationService = new WorkspaceInformationService(
                new ProjectInformationService(new DependencyInformationService(), new FilePathGavExtractor()));
        display = PlatformUI.getWorkbench().getDisplay();
        preferenceChangeDisplayUpdateListener = new PreferenceChangeDisplayUpdateListener(this);
        projectDeletedListener = new ProjectDeletedListener(this);
        projectSelectionListener = new ProjectSelectionListener(this);
        getSite().getPage().addSelectionListener(projectSelectionListener);
        Activator.getDefault().getPreferenceStore().addPropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().addResourceChangeListener(projectDeletedListener,
                IResourceChangeEvent.PRE_DELETE);
        Activator.getDefault().getProjectInformation().setComponentView(this);
        projectInformation = Activator.getDefault().getProjectInformation();
        lastSelectedProjectName = workspaceInformationService.getSelectedProject();
        componentViewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
        componentViewer.setContentProvider(new ComponentTreeViewContentProvider(prefStore, projectInformation));
        TreeViewerColumn viewerCol = new TreeViewerColumn(componentViewer, SWT.NONE);
        viewerCol.setLabelProvider(new TreeColumnViewerLabelProvider(new ComponentTreeViewLabelProvider()));
        viewerCol.getColumn().setText("Detected Vulnerabilities");
        viewerCol.getColumn().setWidth(300);
        viewerCol.getColumn().setResizable(true);
        viewerCol.setLabelProvider(new TreeColumnViewerLabelProvider(new ComponentTreeViewLabelProvider()));
        componentViewer.setInput(lastSelectedProjectName);
    }

    public void resetInput() {
        display.asyncExec(new Runnable() {
            @Override
            public void run() {
                componentViewer.setInput(lastSelectedProjectName);
            }
        });
    }

    public void setLastSelectedProjectName(final String name) {
        this.lastSelectedProjectName = name;
    }

    public void setTableInput(final String input) {
        componentViewer.setInput(input);
    }

    public String getLastSelectedProjectName() {
        return this.lastSelectedProjectName;
    }

    public TreeViewer getComponentViewer() {
        return componentViewer;
    }

    @Override
    public void setFocus() {
        // TODO Auto-generated method stub

    }

    @Override
    public void dispose() {
        super.dispose();

        // remove all listeners when view is closed
        getSite().getPage().removeSelectionListener(projectSelectionListener);
        Activator.getDefault().getPreferenceStore().removePropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().removeResourceChangeListener(projectDeletedListener);
        Activator.getDefault().getProjectInformation().removeComponentView();
    }

}
