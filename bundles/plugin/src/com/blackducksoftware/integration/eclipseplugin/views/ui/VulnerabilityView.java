/*
 * Copyright (C) 2016 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.eclipseplugin.views.ui;

import org.eclipse.core.resources.IResourceChangeEvent;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.TreeViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import com.blackducksoftware.integration.build.utils.FilePathGavExtractor;
import com.blackducksoftware.integration.eclipseplugin.common.constants.PathsToIconFiles;
import com.blackducksoftware.integration.eclipseplugin.common.services.DependencyInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.ProjectInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.WorkspaceInformationService;
import com.blackducksoftware.integration.eclipseplugin.internal.ProjectDependencyInformation;
import com.blackducksoftware.integration.eclipseplugin.startup.Activator;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.PreferenceChangeDisplayUpdateListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectDeletedListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectSelectionListener;
import com.blackducksoftware.integration.eclipseplugin.views.providers.ComponentTreeViewContentProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.ComponentTreeViewLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyComponentColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyLicenseColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyNumVulnColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyTableViewContentProvider;

public class VulnerabilityView extends ViewPart {
    private TreeViewer componentViewer;

    private IPreferenceStore prefStore;

    private ProjectDependencyInformation projectInformation;

    private String lastSelectedProjectName = "";

    private Display display;

    private WorkspaceInformationService workspaceInformationService;

    private PreferenceChangeDisplayUpdateListener preferenceChangeDisplayUpdateListener;

    private ProjectDeletedListener projectDeletedListener;

    private ProjectSelectionListener projectSelectionListener;
    
    //table viewer dependency information
    private TableViewer dependencyTableViewer;

    /*
     * (non-Javadoc)
     * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
     * This is where the view is made
     */
    @Override
    public void createPartControl(Composite parent) {
        prefStore = Activator.getDefault().getPreferenceStore();
        workspaceInformationService = new WorkspaceInformationService(
                new ProjectInformationService(new DependencyInformationService(), new FilePathGavExtractor()));
        display = PlatformUI.getWorkbench().getDisplay();
        preferenceChangeDisplayUpdateListener = new PreferenceChangeDisplayUpdateListener(this);
        projectDeletedListener = new ProjectDeletedListener(this);
        projectSelectionListener = new ProjectSelectionListener(this);
        getSite().getPage().addSelectionListener(projectSelectionListener);
        Activator.getDefault().getPreferenceStore().addPropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().addResourceChangeListener(projectDeletedListener,
                IResourceChangeEvent.PRE_DELETE);
        Activator.getDefault().getProjectInformation().setComponentView(this);
        projectInformation = Activator.getDefault().getProjectInformation();
        lastSelectedProjectName = workspaceInformationService.getSelectedProject();


        dependencyTableViewer = new TableViewer(parent, (SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL));
        DependencyTableViewContentProvider cp = new DependencyTableViewContentProvider(prefStore, projectInformation);
        dependencyTableViewer.setContentProvider(cp);
        dependencyTableViewer.getTable().setHeaderVisible(true);
        dependencyTableViewer.getTable().setLinesVisible(true);
        
        this.createColumns(cp);        
        
        dependencyTableViewer.setInput(lastSelectedProjectName);
        
        
        
         
//        componentViewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);
//        componentViewer.setContentProvider(new ComponentTreeViewContentProvider(prefStore, projectInformation));
//        TreeViewerColumn viewerCol = new TreeViewerColumn(componentViewer, SWT.NONE);
//        viewerCol.getColumn().setText("Detected Vulnerabilities");
//        viewerCol.getColumn().setWidth(300);
//        viewerCol.getColumn().setResizable(true);
//        viewerCol.setLabelProvider(
//             new DelegatingStyledCellLabelProvider(new ComponentTreeViewLabelProvider()));
//        componentViewer.setInput(lastSelectedProjectName);
//
//        Tree tree = componentViewer.getTree();
//        tree.setHeaderVisible(true);
//        tree.setLinesVisible(true);
    }
    
    private void createColumns(DependencyTableViewContentProvider cp) {
//    	TableViewerColumn colDepName = new TableViewerColumn(dependencyTableViewer, SWT.NONE);
//    	colDepName.getColumn().setWidth(300);
//    	colDepName.getColumn().setText("Dependencies");
//    	colDepName.setLabelProvider(new DelegatingStyledCellLabelProvider(new DependencyComponentColumnLabelProvider()));
    	
    	DependencyComponentColumnLabelProvider dependencyComponentColumnLp = new DependencyComponentColumnLabelProvider();
    	dependencyComponentColumnLp.addColumnTo(dependencyTableViewer, 300);
    	
    	DependencyLicenseColumnLabelProvider dependencyLicenseColumnLp = new DependencyLicenseColumnLabelProvider(cp);
    	dependencyLicenseColumnLp.addColumnTo(dependencyTableViewer, 200);
    	
    	DependencyNumVulnColumnLabelProvider dependencyNumVulnColumnLp = new DependencyNumVulnColumnLabelProvider(cp);
    	dependencyNumVulnColumnLp.addColumnTo(dependencyTableViewer, 50);
    	
    	
    }

    public void resetInput() {
        display.asyncExec(new Runnable() {
            @Override
            public void run() {
                dependencyTableViewer.setInput(lastSelectedProjectName);
                componentViewer.setInput(lastSelectedProjectName);
            }
        });
    }

    public void setLastSelectedProjectName(final String name) {
        this.lastSelectedProjectName = name;
    }

    public void setTableInput(final String input) {
        dependencyTableViewer.setInput(input);
        componentViewer.setInput(input);
    }

    public String getLastSelectedProjectName() {
        return this.lastSelectedProjectName;
    }

//    public TreeViewer getComponentViewer() {
//        return componentViewer;
//    }
    
    public TableViewer getDependencyTableViewer() {
    	return this.dependencyTableViewer;
    }

    @Override
    public void setFocus() {
        // TODO Auto-generated method stub

    }

    @Override
    public Image getTitleImage() {
        ImageDescriptor descriptor = Activator.getImageDescriptor(PathsToIconFiles.DUCKY);
        return descriptor == null ? null : descriptor.createImage();
    }

    @Override
    public void dispose() {
        super.dispose();

        // remove all listeners when view is closed
        getSite().getPage().removeSelectionListener(projectSelectionListener);
        Activator.getDefault().getPreferenceStore().removePropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().removeResourceChangeListener(projectDeletedListener);
        Activator.getDefault().getProjectInformation().removeComponentView();
    }

}

