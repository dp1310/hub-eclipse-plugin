/**
 * hub-eclipse-plugin
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.eclipseplugin.views.ui;

import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IResourceChangeEvent;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerComparator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import com.blackducksoftware.integration.eclipseplugin.common.constants.PathsToIconFiles;
import com.blackducksoftware.integration.eclipseplugin.common.services.DependencyInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.ProjectInformationService;
import com.blackducksoftware.integration.eclipseplugin.common.services.WorkspaceInformationService;
import com.blackducksoftware.integration.eclipseplugin.startup.Activator;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.PreferenceChangeDisplayUpdateListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectDeletedListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.ProjectSelectionListener;
import com.blackducksoftware.integration.eclipseplugin.views.listeners.TableDoubleClickListener;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyComponentColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyLicenseColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyNumVulnColumnLabelProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.DependencyTableViewContentProvider;
import com.blackducksoftware.integration.eclipseplugin.views.providers.utils.GavWithParentProject;
import com.blackducksoftware.integration.hub.api.vulnerability.VulnerabilityItem;
import com.blackducksoftware.integration.hub.buildtool.FilePathGavExtractor;
import com.blackducksoftware.integration.hub.buildtool.Gav;

public class VulnerabilityView extends ViewPart {

    private String lastSelectedProjectName = "";

    private Display display;

    private WorkspaceInformationService workspaceInformationService;

    private PreferenceChangeDisplayUpdateListener preferenceChangeDisplayUpdateListener;

    private ProjectDeletedListener projectDeletedListener;

    private ProjectSelectionListener projectSelectionListener;

    // private ComponentSelectionListener componentSelectionListener;

    private TableViewer dependencyTableViewer;

    @Override
    public void createPartControl(Composite parent) {
        workspaceInformationService = new WorkspaceInformationService(
                new ProjectInformationService(new DependencyInformationService(), new FilePathGavExtractor()));
        display = PlatformUI.getWorkbench().getDisplay();
        preferenceChangeDisplayUpdateListener = new PreferenceChangeDisplayUpdateListener(this);
        projectDeletedListener = new ProjectDeletedListener(this);
        projectSelectionListener = new ProjectSelectionListener(this);
        getSite().getPage().addSelectionListener(projectSelectionListener);
        Activator.getPlugin().getPreferenceStore().addPropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().addResourceChangeListener(projectDeletedListener,
                IResourceChangeEvent.PRE_DELETE);
        Activator.getPlugin().getProjectInformation().setComponentView(this);
        lastSelectedProjectName = workspaceInformationService.getSelectedProject();

        // componentSelectionListener = new ComponentSelectionListener(this);

        dependencyTableViewer = new TableViewer(parent, (SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL));
        DependencyTableViewContentProvider cp = new DependencyTableViewContentProvider();
        dependencyTableViewer.setContentProvider(cp);
        dependencyTableViewer.getTable().setHeaderVisible(true);
        dependencyTableViewer.getTable().setLinesVisible(true);
        dependencyTableViewer.setComparator(new ViewerComparator() {
            @Override
            public int compare(Viewer viewer, Object e1, Object e2) {
                GavWithParentProject gav1 = (GavWithParentProject) e1;
                GavWithParentProject gav2 = (GavWithParentProject) e2;
                Map<Gav, List<VulnerabilityItem>> vulnsMap = cp.getProjectInformation().getVulnMap(gav1.getParentProject());
                int gav1Vulns = vulnsMap.get(gav1.getGav()).size();
                int gav2Vulns = vulnsMap.get(gav2.getGav()).size();
                // Reverse order, more vulnerabilities should appear near the top
                return gav2Vulns - gav1Vulns;
            }
        });

        // dependencyTableViewer.addSelectionChangedListener(componentSelectionListener);

        this.createColumns(cp);

        dependencyTableViewer.setInput(lastSelectedProjectName);
        for (TableColumn column : dependencyTableViewer.getTable().getColumns()) {
            column.pack();
        }

        dependencyTableViewer.addDoubleClickListener(new TableDoubleClickListener());

    }

    private void createColumns(DependencyTableViewContentProvider cp) {

        DependencyComponentColumnLabelProvider dependencyComponentColumnLp = new DependencyComponentColumnLabelProvider();
        dependencyComponentColumnLp.addColumnTo(dependencyTableViewer);

        DependencyLicenseColumnLabelProvider dependencyLicenseColumnLp = new DependencyLicenseColumnLabelProvider(cp);
        dependencyLicenseColumnLp.addColumnTo(dependencyTableViewer);

        DependencyNumVulnColumnLabelProvider dependencyNumVulnColumnLp = new DependencyNumVulnColumnLabelProvider(cp);
        dependencyNumVulnColumnLp.addColumnTo(dependencyTableViewer);
    }

    public void resetInput() {
        display.asyncExec(new Runnable() {
            @Override
            public void run() {
                dependencyTableViewer.setInput(lastSelectedProjectName);
            }
        });
    }

    public void setLastSelectedProjectName(final String name) {
        this.lastSelectedProjectName = name;
    }

    public void setTableInput(final String input) {
        dependencyTableViewer.setInput(input);

    }

    public String getLastSelectedProjectName() {
        return this.lastSelectedProjectName;
    }

    public TableViewer getDependencyTableViewer() {
        return this.dependencyTableViewer;
    }

    @Override
    public void setFocus() {
        // TODO Auto-generated method stub

    }

    @Override
    public Image getTitleImage() {
        ImageDescriptor descriptor = Activator.getImageDescriptor(PathsToIconFiles.DUCKY);
        return descriptor == null ? null : descriptor.createImage();
    }

    @Override
    public void dispose() {
        super.dispose();

        // remove all listeners when view is closed
        getSite().getPage().removeSelectionListener(projectSelectionListener);
        Activator.getPlugin().getPreferenceStore().removePropertyChangeListener(preferenceChangeDisplayUpdateListener);
        ResourcesPlugin.getWorkspace().removeResourceChangeListener(projectDeletedListener);
        Activator.getPlugin().getProjectInformation().removeComponentView();
    }

}
