package com.blackducksoftware.integration.eclipseplugin.hub;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import com.blackducksoftware.integration.build.Gav;
import com.blackducksoftware.integration.eclipseplugin.internal.Vulnerability;
import com.blackducksoftware.integration.hub.api.component.ComponentItem;
import com.blackducksoftware.integration.hub.api.component.ComponentRestService;
import com.blackducksoftware.integration.hub.api.component.id.ComponentIdItem;
import com.blackducksoftware.integration.hub.api.component.id.ComponentIdRestService;
import com.blackducksoftware.integration.hub.api.component.version.ComponentVersion;
import com.blackducksoftware.integration.hub.api.component.version.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.vulnerabilities.VulnerabilityItem;
import com.blackducksoftware.integration.hub.api.vulnerabilities.VulnerabilityRestService;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.UnexpectedHubResponseException;

public class ComponentVulnerabilityLookup {

    private final ComponentRestService componentRestService;

    private final ComponentVersionRestService versionRestService;

    private final ComponentIdRestService idRestService;

    private final VulnerabilityRestService vulnerabilityRestService;

    public ComponentVulnerabilityLookup(final ComponentRestService restService,
            final ComponentVersionRestService versionRestService, final ComponentIdRestService idRestService,
            final VulnerabilityRestService vulnerabilityRestService) {
        this.componentRestService = restService;
        this.versionRestService = versionRestService;
        this.idRestService = idRestService;
        this.vulnerabilityRestService = vulnerabilityRestService;
    }

    // what to do if there is more than one component in list?
    public ComponentItem getComponentWithId(final String id, final Gav gav) {
        try {
            final List<ComponentItem> componentList = componentRestService.getAllComponents(id, gav.getGroupId(),
                    gav.getArtifactId(), gav.getVersion());
            return componentList.get(0);
        } catch (IOException | BDRestException | URISyntaxException e) {
            // logger?
            return null;
        }
    }

    public List<Vulnerability> vulnsFromVulnItems(final List<VulnerabilityItem> vulns) {
        final Iterator<VulnerabilityItem> it = vulns.iterator();
        final List<Vulnerability> vulnList = new LinkedList<>();
        while (it.hasNext()) {
            final VulnerabilityItem vuln = it.next();
            vulnList.add(new Vulnerability(vuln.getVulnerabilityName(), vuln.getDescription(), vuln.getBaseScore(),
                    vuln.getSeverity()));
        }
        return vulnList;
    }

    public List<Vulnerability> getVulnsFromComponent(final String id, final Gav gav) {
        final ComponentItem component = getComponentWithId(id, gav);
        if (component == null) {
            return null;
        }
        final String componentVersionURL = component.getVersionUrl();
        if (componentVersionURL != null) {
            try {
                final ComponentVersion version = versionRestService.getItem(componentVersionURL);
                try {
                    final String vulnURL = version.getLink("vulnerabilities");
                    final List<VulnerabilityItem> vulnItems = vulnerabilityRestService
                            .getComponentVersionVulnerabilities(vulnURL);
                    return vulnsFromVulnItems(vulnItems);

                } catch (final UnexpectedHubResponseException e) {
                    // logger?
                }
            } catch (IOException | URISyntaxException | BDRestException e) {
                // logger?
            }
        }
        final String componentURL = component.getComponentUrl();
        if (componentURL != null) {
            try {
                final ComponentIdItem idComponent = idRestService.getComponent(componentURL);
                try {
                    final String vulnURL = idComponent.getLink("vulnerabilities");
                    final List<VulnerabilityItem> vulnItems = vulnerabilityRestService
                            .getComponentVersionVulnerabilities(vulnURL);
                    return vulnsFromVulnItems(vulnItems);
                } catch (final UnexpectedHubResponseException e) {
                    // logger?
                }
            } catch (IOException | URISyntaxException | BDRestException e) {
                // logger?
            }
        }
        return null;
    }

}
